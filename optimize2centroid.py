from ast import literal_eval
from sklearn.cluster import KMeans
import numpy as np
import itertools
INCR = 10
# edit to the name of the input file
f = open('circlecovers6.txt', 'r')

n = int(f.readline())
points = [f.readline() for _ in range(n)]

m = int(f.readline())
radii = [int(f.readline()) for _ in range(m)]

centers = []
# replace from here to line 18 with your own logic
# points is a list of tuples of the points, and radii is a list of radii

points = [i.strip().split(' ') for i in points]
points = [(int(i[0]), int(i[1])) for i in points]
radii = np.array([int(i) for i in radii])
radii_indices = np.argsort(radii)[::-1]
radii = radii[radii_indices]
inverse = np.empty_like(radii_indices)
inverse[radii_indices] = np.arange(radii_indices.size)

def inCircle(center,coords,r):
    return np.linalg.norm(np.array(coords)-center) <= r


kmeans = KMeans(len(radii),n_init=1000, max_iter=10000).fit(points)
kcenters=kmeans.cluster_centers_.tolist()
active_points = points.copy()

active_points = points.copy()
active_centers = kcenters.copy()

for r in radii:
    best_center = None
    to_remove = None
    max_points = -1
    for c in active_centers:
        count = 0
        in_c = []
        for p in active_points:
            if inCircle(c,p,r):
                count += 1
                in_c.append(p)
        if count > max_points:
            max_points = count
            best_center = c
            to_remove = in_c.copy()
    centers.append(best_center)

    new_p = [p for p in active_points if p not in to_remove]
    active_points = new_p.copy()
    active_centers.remove(best_center)


    print(n-len(active_points))

# change to whatever you want your output file to be called
out = open('output26.txt', 'w')

for t in np.array(centers)[inverse]:
    out.write(str(t[0]) + ' '+ str(t[1]))
    out.write("\n")
out.close()

# 4:
# 309.2376237623762 282.07920792079204
# 320.3797468354431 218.1645569620253
# 135.71052631578954 380.4473684210526
# 126.60666666666673 403.22666666666663
# 362.7631578947369 597.0526315789473
# 298.49504950495054 233.7623762376238
# 143.87500000000006 416.826086956522
# 361.3619047619046 395.0095238095238
# 285.89743589743586 448.25641025641033
# 210.41666666666666 596.1666666666667
# 189.12359550561797 361.5
# 372.8928571428571 537.1785714285713
# 208.78571428571428 109.0
# 202.5592105263158 307.5197368421053
# 238.61016949152548 291.141242937853
# 362.8478260869564 281.7391304347826
# 357.3253968253965 315.42063492063494
# 243.36923076923082 315.11538461538464
# 89.04964539007075 284.48936170212755
# 131.74838709677422 434.516129032258
# 128.01219512195127 347.25
# 104.6402439024391 291.8414634146342
# 187.8 215.39999999999998
# 96.87577639751535 315.37888198757764
# 250.78301886792457 250.1603773584905
# 263.5413533834587 292.8646616541353
# 361.6538461538463 64.80769230769249
# 269.7391304347826 391.1304347826087
# 162.68944099378876 399.42236024844715
# 372.1428571428571 142.25
# 205.34920634920636 332.06349206349205
# 178.15789473684205 340.9941520467836
# 156.17692307692306 347.4076923076923
# 328.96428571428567 47.64285714285711
# 182.12080536912748 401.234899328859
# 253.64220183486245 331.48623853211006
# 277.4070796460177 255.5486725663717
# 83.96323529411747 251.52941176470597
# 267.3706896551725 315.6465517241379
# 321.15 507.19999999999993
# 202.8235294117647 31.35294117647061
# 167.95530726256982 364.22346368715085
# 312.8604651162791 369.8837209302325
# 126.36206896551721 322.9597701149425
# 296.906976744186 58.0232558139536
# 91.21428571428585 473.1428571428571
# 324.92857142857144 465.3333333333333
# 115.63095238095225 308.24404761904765
# 126.6 467.2685714285717
# 143.357142857143 397.84415584415586
# 140.41558441558456 333.59090909090907
# 110.75159235668787 478.47770700636966
# 251.78947368421052 59.63157894736844
# 108.5965909090909 331.52272727272725
# 195.92307692307693 537.4615384615385
# 73.01298701298677 265.87662337662346
# 167.39999999999998 418.3722222222224
# 284.6198347107438 278.090909090909
# 180.95808383233526 382.9880239520957
# 341.07142857142856 562.8928571428571
# 120.09756097560964 421.41463414634165
# 84.27215189873397 302.0886075949367
# 157.88265306122452 380.55102040816325
# 238.28571428571428 191.14285714285714
# 364.90243902439033 500.97560975609747
# 363.5428571428572 102.71428571428561
# 356.04444444444454 18.222222222222285
# 364.3333333333334 462.3148148148147
# 219.09459459459455 363.42567567567573
# 66.22764227642256 247.57723577235777
# 226.41666666666666 466.75
# 214.33548387096772 286.432258064516
# 206.9182389937107 350.39622641509436
# 93.17293233082692 269.47368421052624
# 71.95744680851041 230.34042553191512
# 317.7719298245615 414.1754385964913
# 287.7368421052631 99.1052631578948
# 221.9710144927536 315.17391304347825
# 153.59090909090918 433.62987012987026
# 201.39583333333334 378.63888888888886
# 335.07766990291265 263.7766990291262
# 362.2777777777778 239.05555555555554
# 185.7076923076923 321.16153846153844
# 273.5070422535211 232.05633802816908
# 304.20720720720715 259.3693693693693
# 287.11403508771934 299.4385964912281
# 361.10126582278474 430.4050632911392
# 143.9127516778525 360.50335570469804
# 366.6874999999998 365.0104166666667
# 255.384105960265 270.73509933774835
# 73.07746478873216 285.88028169014075
# 293.69387755102036 15.020408163265529
# 372.55555555555554 185.74074074074082
# 363.0892857142855 338.61607142857144
# 118.3790849673202 447.79084967320284
# 140.44324324324327 451.11891891891923
# 232.66829268292685 341.11219512195123
# 283.0909090909091 603.5454545454545
# 327.7187499999999 242.04166666666663
# 231.92499999999995 268.26874999999995
